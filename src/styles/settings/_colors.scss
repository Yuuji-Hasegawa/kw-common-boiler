@use "sass:map";
@use "sass:color";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "sass:list";

@function f-tint($color, $value) {
  @return color.adjust(color.mix(white, $color, $value), $saturation: -1 * $value );
}

$pattern: (
  myBlue: #007aff,
  myIndigo: #5856d6,
  myPurple: #af52de,
  myPink: #ff2d55,
  myRed: #ff3b30,
  myOrange: #ff9500,
  myYellow: #ffcc00,
  myGreen: #28cd41,
  myTeal: #59adc4,
  myCyan: #55bef0,
) !default;

$colorLabels: (
  myPrimary: map.get($pattern, myBlue),
  myDanger: map.get($pattern, myRed),
  mySuccess: map.get($pattern, myGreen),
  myWarning: map.get($pattern, myYellow),
  myInfo: map.get($pattern, myCyan),
  myVisited: map.get($pattern, myPurple),
) !default;

$grayH: color.hue(map.get($colorLabels, myPrimary));
$grayS: 10%;
$grayBase: 93%;
$grayLevel: 11.3%;
$grayDarkL: $grayBase - $grayLevel * 2;
$grayL: $grayBase - $grayLevel * 5;
$grayPaleL: $grayBase - $grayLevel * 7;
$grayLightness: 93%;
$grayLightnessIncrement: 11.3%;

$brandColors: (
  lightTint: color.adjust(map.get($colorLabels, myPrimary), $lightness: 15%, $saturation: -10%, $hue: -1deg),
  lightBase: map.get($colorLabels, myPrimary),
  lightShade: color.adjust(map.get($colorLabels, myPrimary), $lightness: -15%, $saturation: 10%, $hue: 1deg),
  darkTint: color.adjust(f-tint(map.get($colorLabels, myPrimary), $grayPaleL), $lightness: 15%, $saturation: -10%, $hue: -1deg),
  darkBase: f-tint(map.get($colorLabels, myPrimary), $grayPaleL),
  darkShade: color.adjust(f-tint(map.get($colorLabels, myPrimary), $grayPaleL), $lightness: -15%, $saturation: 10%, $hue: 1deg),
) !default;

$lightColors: (
  bg: #fff,
  overlay: hsla($grayH, $grayS, $grayPaleL, 7%),
  input: hsl($grayH, $grayS - 7%, $grayBase + 1%),
  txt: hsl($grayH, $grayS, $grayPaleL),
  dimmed: hsla($grayH, $grayS, $grayPaleL, 50%),
  border: hsla($grayH, $grayS, $grayPaleL, 10%),
  separator: hsla($grayH, $grayS, $grayDarkL),
  primary: map.get($brandColors, lightBase),
  tint: map.get($brandColors,lightTint),
  shade: map.get($brandColors, lightShade),
  danger: map.get($colorLabels, myDanger),
  success: map.get($colorLabels, mySuccess),
  warning: map.get($colorLabels, myWarning),
  info: map.get($colorLabels, myInfo),
  visited: map.get($colorLabels, myVisited),
);

$darkColors: (
  bg: hsl($grayH, $grayS, $grayPaleL),
  overlay: hsla($grayH, $grayS, $grayBase, 7%),
  input: hsl($grayH, $grayS - 4%, $grayBase - 74%),
  txt: hsl($grayH, $grayS, $grayBase),
  dimmed: hsla($grayH, $grayS, $grayBase, 50%),
  border: hsla($grayH, $grayS, $grayBase, 10%),
  separator: hsla($grayH, $grayS, $grayL),
  primary: map.get($brandColors, darkBase),
  tint: map.get($brandColors, darkTint),
  shade: map.get($brandColors, darkShade),
  danger: f-tint(map.get($colorLabels, myDanger), $grayPaleL),
  success: f-tint(map.get($colorLabels, mySuccess), $grayPaleL),
  warning: f-tint(map.get($colorLabels, myWarning), $grayPaleL),
  info: f-tint(map.get($colorLabels, myInfo), $grayPaleL),
  visited: f-tint(map.get($colorLabels, myVisited), $grayPaleL),
);

@function f-lightcolor($key) {
  @return map.get($lightColors, $key);
}

@function f-darkcolor($key) {
  @return map.get($darkColors, $key);
}

$filter: color.mix(map.get($lightColors, bg), map.get($darkColors, bg));

@function f-mix($color1, $color2, $weight: 0.5) {
  @if $weight == 0 {
    @return $color1;
  }
  @if $weight == 1 {
    @return $color2;
  }

  $w1: 1 - $weight;
  $w2: $weight;

  $oklab1: f-rgb-to-oklab($color1);
  $oklab2: f-rgb-to-oklab($color2);

  $labmix: (
    'l': map.get($oklab1, 'l') * $w1 + map.get($oklab2, 'l') * $w2,
    'a': map.get($oklab1, 'a') * $w1 + map.get($oklab2, 'a') * $w2,
    'b': map.get($oklab1, 'b') * $w1 + map.get($oklab2, 'b') * $w2,
  );

  $rgb: f-oklab-to-rgb($labmix);
  @return rgba($rgb, color.alpha($color1) * $w1 + color.alpha($color2) * $w2);
}

@function f-degamma($value) {
  @if $value <= 0.04045 {
    @return math.div($value, 12.92);
  }
  @return math.pow(math.div($value + 0.055, 1.055), 2.4);
}

@function f-gamma($value) {
  @if $value <= 0.0031308 {
    @return math.clamp($value * 12.92, 0, 1);
  }
  @return math.clamp(1.055 * math.pow($value, math.div(1, 2.4)) - 0.055, 0, 1);
}

@function f-cbrt($num) {
  $one_third: math.div(1,3);
  $cbrt: math.pow(math.abs($num), $one_third);
  @if $num < 0 {
    @return -1 * $cbrt;
  } @else {
    @return $cbrt;
  }
}

@function f-degToRad($degrees) {
  @return $degrees * math.div(math.$pi, 180);
}

@function f-unitless($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function f-rgb-to-oklab($color) {
  $red: f-degamma(math.div(color.red($color), 255));
  $green: f-degamma(math.div(color.green($color), 255));
  $blue: f-degamma(math.div(color.blue($color), 255));
  $alpha: color.alpha($color);

  $lms: (
    'l': 0.4122214708 * $red + 0.5363325363 * $green + 0.0514459929 * $blue,
    'm': 0.2119034982 * $red + 0.6806995451 * $green + 0.1073969566 * $blue,
    's': 0.0883024619 * $red + 0.2817188376 * $green + 0.6299787005 * $blue,
  );

  $l: 0.2104542553 * f-cbrt(map.get($lms, 'l')) + 0.793617785 * f-cbrt(map.get($lms, 'm')) - 0.0040720468 * f-cbrt(map.get($lms, 's'));
  $a: 1.9779984951 * f-cbrt(map.get($lms, 'l')) - 2.428592205 * f-cbrt(map.get($lms, 'm')) + 0.4505937099 * f-cbrt(map.get($lms, 's'));
  $b: 0.0259040371 * f-cbrt(map.get($lms, 'l')) + 0.7827717662 * f-cbrt(map.get($lms, 'm')) - 0.808675766 * f-cbrt(map.get($lms, 's'));
  @return ('l': $l, 'a': $a, 'b': $b, alpha: $alpha);
}

@function f-oklab-to-rgb($oklab) {
  @if meta.type-of($oklab) != 'map' {
    @error "Must provide map of \"l\", \"a\", \"b\" values";
  }

  $lms: (
    'l': math.pow(map.get($oklab, 'l') + 0.39633779217376774 * map.get($oklab, 'a') + 0.2158037580607588 * map.get($oklab, 'b'), 3),
    'm': math.pow(map.get($oklab, 'l') - 0.10556134232365633 * map.get($oklab, 'a') - 0.0638541747717059 * map.get($oklab, 'b'), 3),
    's': math.pow(map.get($oklab, 'l') - 0.08948418209496574 * map.get($oklab, 'a') - 1.2914855378640917 * map.get($oklab, 'b'), 3),
  );

  $r: math.max(4.0767416621 * map.get($lms, 'l') - 3.3077115913 * map.get($lms, 'm') + 0.2309699292 * map.get($lms, 's'), 0);
  $g: math.max(-1.2684380046 * map.get($lms, 'l') + 2.6097574011 * map.get($lms, 'm') - 0.3413193965 * map.get($lms, 's'), 0);
  $b: math.max(-0.0041960863 * map.get($lms, 'l') - 0.7034186147 * map.get($lms, 'm') + 1.707614701 * map.get($lms, 's'), 0);

  $alpha: 1;
  @if map.has-key($oklab, 'alpha') {
    $alpha: map.get($oklab, 'alpha');
  }

  @return rgba(f-gamma($r) * 255, f-gamma($g) * 255, f-gamma($b) * 255, $alpha);
}

@function f-rgb-to-oklch($color) {
  $oklab: f-rgb-to-oklab($color);
  $l: map.get($oklab, 'l');
  $a: map.get($oklab, 'a');
  $b: map.get($oklab, 'b');
  $alpha: 1;
  @if (map.has-key($oklab, 'alpha')) {
    $alpha: map.get($oklab, 'alpha');
  }

  $h: 0;

  $const: 0.0002;

  @if (math.abs($a) >= $const or math.abs($b) >= $const) {
    $h: f-unitless(math.atan2($b, $a));
  }
  @while ($h < 0) {
    $h: $h + 360;
  }
  @while ($h >= 360) {
    $h: $h - 360;
  }
  @return (l: $l, c: math.sqrt(math.pow($a, 2) + math.pow($b, 2)), h: $h, alpha: $alpha);
}

@function f-oklch-to-rgb($oklch) {
  @if meta.type-of($oklch) != 'map' {
    @error "Must provide map of \"l\", \"c\", \"h\" values";
  }

  $l: map.get($oklch, 'l');
  $c: map.get($oklch, 'c');
  $h: map.get($oklch, 'h');
  $alpha: 1;
  @if (map.has-key($oklch, 'alpha')) {
    $alpha: map.get($oklch, 'alpha');
  }

  $const: 0.0002;

  @if ($l < $const) {
    @return rgba(0, 0, 0, $alpha);
  }

  @while ($h < 0) {
    $h: $h + 360;
  }
  @while ($h >= 360) {
    $h: $h - 360;
  }

  $a: math.cos(f-degToRad($h)) * $c;
  $b: math.sin(f-degToRad($h)) * $c;

  @return f-oklab-to-rgb(
    (
      l: $l,
      a: $a,
      b: $b,
      alpha: $alpha,
    )
  );
}

@function f-lighten($color, $weight: 0.5) {
  @if $weight >= 0 {
    @return f-mix($color, #fff, $weight);
  } @else {
    @return f-darken($color, -$weight);
  }
}

@function f-darken($color, $weight: 0.5) {
  @if $weight >= 0 {
    @return f-mix($color, #000, $weight);
  } @else {
    @return f-lighten($color, -$weight);
  }
}

$targetL: map.get(f-rgb-to-oklab(#ffffff), l);
$middleColor: f-lighten(map.get($colorLabels, myPrimary), math.div((0.6 * $targetL - map.get(f-rgb-to-oklab(map.get($colorLabels, myPrimary)), l)), map.get(f-rgb-to-oklab(map.get($colorLabels, myPrimary)), l)));
$middleL: map.get(f-rgb-to-oklab($middleColor), l);

$primaryTone: (
  level0: f-lighten($middleColor, math.div((0 * $targetL - $middleL), $middleL)),
  level10: f-lighten($middleColor, math.div((0.1 * $targetL - $middleL), $middleL)),
  level20: f-lighten($middleColor, math.div((0.2 * $targetL - $middleL), $middleL)),
  level30: f-lighten($middleColor, math.div((0.3 * $targetL - $middleL), $middleL)),
  level40: f-lighten($middleColor, math.div((0.4 * $targetL - $middleL), $middleL)),
  level50: f-lighten($middleColor, math.div((0.5 * $targetL - $middleL), $middleL)),
  level60: $middleColor,
  level70: f-lighten($middleColor, math.div(((0.7 * $targetL - $middleL) + $middleL * 0.1), $middleL)),
  level80: f-lighten($middleColor, math.div(((0.8 * $targetL - $middleL) + $middleL * math.sqrt(0.03)), $middleL)),
  level90: f-lighten($middleColor, math.div(((0.9 * $targetL - $middleL) + $middleL * 0.2667), $middleL)),
  level95: f-lighten($middleColor, math.div(((0.95 * $targetL - $middleL) + $middleL * 0.3), $middleL)),
  level99: f-lighten($middleColor, math.div(((0.99 * $targetL - $middleL) + $middleL * 0.325), $middleL)),
  level100: f-lighten($middleColor, math.div(((1.0 * $targetL - $middleL) + $middleL * math.div(1,3)), $middleL)),
) !default;

@debug $primaryTone;
